openapi: "3.0.0"
info:
  version: 0.3.6
  title: Messages API
  description: 'The Messaging API is a new API that consolidates all messaging channels. It encapsulates a user (developer) from having to use multiple APIs to interact with our various channels such as SMS, MMS, Viber, Facebook Messenger, etc. The API normalises information across all channels to abstracted to, from and content. This API is currently in Beta.'
  contact:
    name: Nexmo DevRel
    email: devrel@nexmo.com
    url: 'https://developer.nexmo.com/'
  x-label: Beta
servers:
  - url: https://api.nexmo.com/v0.1/messages
paths:
  /:
    post:
      security:
        - bearerAuth: []
        - basicAuth: []
      summary: Send a Message
      operationId: NewMessage
      requestBody:
        description: Send a Message.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/requestBodies/Text'
                - $ref: '#/components/requestBodies/Image'
                - $ref: '#/components/requestBodies/Audio'
                - $ref: '#/components/requestBodies/Video'
                - $ref: '#/components/requestBodies/File'
                - $ref: '#/components/requestBodies/Template'
      responses:
        '202':
          description: Accepted.
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
  schemas:
    to:
      type: string
      example: 123456
    from:
      type: string
      example: 789012
    channel:
      type: string
      enum:
        - sms
        - messenger
        - viber_service
        - whatsapp
        - mms

    baseMessageType:
      type: object
      required:
        - to
        - from
        - message
      properties:
        to:
          $ref: "#/components/schemas/to"
        from:
          $ref: "#/components/schemas/from"
        channel:
          $ref: "#/components/schemas/channel"
        client_ref:
          type: string

    channelOptionsMessenger:
      type: object
      properties:
        messenger:
          type: object
          properties:
            category:
              type: string
              enum:
                - response
                - update
                - message_tag
            tag:
              type: string

    channelOptionsViber:
      type: object
      properties:
        viber_service:
          type: object
          properties:
            category:
              type: string
              enum:
                - transaction
                - promotion
            ttl:
              type: integer
            type:
              type: string

    channelOptionsWhatsapp:
      type: object
      properties:
        whatsapp:
          type: object
          properties:
            policy:
              type: string
              enum:
                - fallback
                - deterministic
            locale:
              type: string
              enum:
                - en-GB
                - en-US
    channelOptionsAll:
      allOf:
        - $ref: "#/components/schemas/channelOptionsMessenger"
        - $ref: "#/components/schemas/channelOptionsViber"
        - $ref: "#/components/schemas/channelOptionsWhatsapp"

  requestBodies:
    Text:
      allOf:
        - $ref: "#/components/schemas/baseMessageType"
        - description: Text
          x-tab-id: Text
          properties:
            type:
              type: string
              enum:
                - text
              example: text
            text:
              type: string
        - $ref: "#/components/schemas/channelOptionsAll"

    Image:
      allOf:
        - $ref: "#/components/schemas/baseMessageType"
        - description: Image
          x-tab-id: Image
          type: object
          properties:
            type:
              type: string
              enum:
                - image
              example: image
            image:
              type: object
              properties:
                url:
                  type: string
                caption:
                  type: string
        - $ref: "#/components/schemas/channelOptionsAll"

    Audio:
      allOf:
        - $ref: "#/components/schemas/baseMessageType"
        - description: Audio
          x-tab-id: Audio
          type: object
          properties:
            channel:
              type: string
              enum:
                - messenger
                - whatsapp
            type:
              type: string
              enum:
                - audio
              example: audio
            audio:
              type: object
              properties:
                url:
                  type: string
                  description: |
                    The URL of the audio attachment.

                    **messenger** supports .mp3.

                    **whatsapp** supports .aac, .m4a, .amr, .mp3 and .opus.
                  minLength: 10
                  maxLength: 2000
                  example: 'https://example.com/audio.mp3'
        - $ref: "#/components/schemas/channelOptionsAll"

    Video:
      allOf:
        - $ref: "#/components/schemas/baseMessageType"
        - description: Video
          x-tab-id: Video
          type: object
          properties:
            type:
              type: string
              enum:
                - video
              example: video
            audio:
              type: object
              properties:
                url:
                  type: string
        - $ref: "#/components/schemas/channelOptionsAll"

    File:
      allOf:
        - $ref: "#/components/schemas/baseMessageType"
        - description: File
          x-tab-id: File
          type: object
          properties:
            type:
              type: string
              enum:
                - file
              example: file
            audio:
              type: object
              properties:
                url:
                  type: string
                caption:
                  type: string
        - $ref: "#/components/schemas/channelOptionsAll"

    Template:
      allOf:
        - $ref: "#/components/schemas/baseMessageType"
        - description: Template
          x-tab-id: Template
          type: object
          properties:
            type:
              type: string
              enum:
                - template
              example: template
            template:
              type: object
              properties:
                name:
                  type: string
                parameters:
                  type: array
                  items:
                    type: object
        - $ref: "#/components/schemas/channelOptionsAll"

  responses:
    Error:
      description: 'The error format is standardized to the 4xx/5xx range with a code and a human readable explanation.'
      required:
        - type
        - title
        - detail
        - instance
      properties:
        type:
          type: string
          example: 'https://www.nexmo.com/messages/Errors#InvalidParams'
        title:
          type: string
          example: 'Invalid Parameters'
        detail:
          type: string
          example: 'Your request parameters did not validate.'
        instance:
          type: string
          example: f94b4e56604e07e5e5ad5a7228618f81
